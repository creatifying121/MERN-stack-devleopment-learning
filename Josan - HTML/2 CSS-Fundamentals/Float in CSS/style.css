/* doing a global reset using the universal selector. we define margin: 0 and padding: 0 in universal selector because these are not the properties that are related to text, and therefore it is not a property that will get inherited from parent to child elements. instead, if we want to apply margins and paddings to each single element then we can use universal selector

and these margin and padding can be easily overridden by other elements' properties. 

universal selector has a specificity of zero
*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #444;
  border-top: 10px solid #1098ad;

  position: relative;
}

/* centering a page in the browser: we need a container here with a specific width acc to which we can center our content */
.container {
  width: 700px;
  margin: 0 auto;
  /* position: relative; */
}

h1,
h2,
h3 {
  color: #1098ad;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: top&bottom right&left */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

.post-header {
  margin-bottom: 40px;
}

nav {
  font-size: 18px;
}

article {
  margin-bottom: 60px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 40px;
  /* box-sizing: border-box; */
  /* adding dimensions */
  /* width: 500px; */
}

/* ABSOLUTE POSITION EXAMPLE */
.like {
  padding: 20px;
  font-size: 22px;
  cursor: pointer;

  position: absolute;
  bottom: 50px;
  right: 50px;
}

/* PSEUDO ELEMENT EXAMPLE */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* p::first-line {
  color: red;
} */

/* ADJACENT ELEMENT SELECTOR / ADJACENT SIBLING SELECTOR */
/* in this example we only want to select the p element which are adjacent siblings of h3 element */

/* h3 + p::first-line {
  color: red;
} */

/* after and before pseudo elements */
h2::after {
  content: "TOP";
  background-color: yellow;
  color: black;
  font-size: 16px;
  display: inline-block;
  font-weight: bold;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

h1 {
  /* text styling */
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  /* background-color: orange; */
  position: relative;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

/* for the last list item, we do not want the margin to be applied */
li:last-child {
  margin-bottom: 0;
}

/* descendant selector: all p elements which are inside the footer element will be selected and hence the styles will be applied accordingly */
/* footer p {
  font-size: 16px;
} */

/* here we only wanted to style the "laura jones" text, but somehow "test para" takes up this style. so this is not a robust way, hence we can use nested decendant selector by adding article before header p, so it will make it more specific */
/* article header p {
  font-style: italic;
} */

/* id selector */
#author {
  font-size: 18px;
  font-style: italic;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-size: bold;
}

.related-list {
  list-style: none;
  margin-left: 0;
}

/* pseudo classes */
/* .first-li {
  font-weight: bold;
} */

/* above way can be used, but we can do it better using the pseudo class */

/* this first-child pseudo class will select all the li elements which are the first child of their parent (ul or ol) */
li:first-child {
  font-weight: bold;
}

/* this last-child pseudo class will select all the li elements which occur in last inside their parent. */
li:last-child {
  font-style: italic;
}

/* we can also choose a particular child using nth-child(num_of_child_you_want_to_select) pseudo class */
/* li:nth-child(2) {
  color: red;
} */

/* misconception - this won't work */
article p:first-child {
  color: red;
}

/* styling hyperlinks */

/* remember to apply these pseudo classes in this order only, link, visited, hover and active (LVHA) */

/* this :link pseudo class will only select the anchor elements which have "href" attribute in them */
a:link {
  color: #1098ad;
  text-decoration: none;
}

/* :visited pseudo class will change the color of the links which are visited before */
a:visited {
  color: #1098ad;
}

/* :hover pseudo class will help us add style to the anchor element which we want to display everytime when the link is hovered using a mouse */
a:hover {
  color: orangered;
  text-decoration: underline dotted orangered;
  font-weight: bold;
}

/* :active pseudo class will help us adding styles when we actually click on the link */
a:active {
  background-color: black;
  font-style: italic;
}

/* height: auto will only be applied if we have set some dimentions in the html, otherwise it will not work and we have to provide dimensions here in css */
.post-img {
  width: 100%;
  height: auto;
}

/* conflicting css rules: we may have a situation where an element has id and multiple classes. and the similar styles are applied on each of these things, so following will be the hierarchy (lowest priority to highest priority)

0. universal selector (*)
1. element selector (multiple)
2. class(.) or pseudo class(:) selector (multiple)
3. id(#) selector (multiple)
4. inline css 
5. !important

***for those where (multiple) is written, so if there will be multiple rules for them, then last one will be applied

see this in the example below:
*/
/* id will be applied on priority */
/* #copyright {
  color: red;
} */

/* if id is commented, then .text style will apply as it is declared lastly */
/* .copyright {
  color: green;
}

.text {
  color: blue;
} */

/* if none of above are applied, element selector will work here */
/* since this element selector has the lowest priority, so if we declare it important, then it will be applied above all other css rules, but this is just a hack, not a good practice to use. */
/* footer p {
  color: yellow !important;
} */

/* IMPORTANT NOTE */
/* Phenomena of Collpasing margins: when we have two margins occupying the same space, then only one of them is actually visible on the page, which is usually the larger one. */

/* we cannot apply height and width to inline elements and also paddings and margins are applied on the left and right of inline element only. this is the fundamental difference between inline and block elements */

/* inline-block elements behaves like inline elements from outside and as block elements from inside. this means that, inline-block elements take up the space as required and do not cause any line break, but we can also apply margin and paddings veritcally too, and box model will apply as it will be shown */

/* we have two positioning modes (normal flow which can be achieved using position: relative; and absolute positioning which can be achieved using position: absolute;) 

using absolute position, we can position the element anywhere on the page, that element will not be in the normal flow, hence also called "out of flow"

absolute position has no impact on the surrounding elements, and it can easily overlap other elements

we use top, bottom, right or left to absolutely position the elements from its "RELATIVELY POSITIONED CONTAINER"
*/

/* PSEUDO ELEMENTS: these elements do not exist in the html but we can still select and style in CSS. one of the common example is the first letter of the paragraph element.

BY DEFAULT ANY PSEUDO ELEMENT IS AN INLINE ELEMENT
*/

/* Adjacent sibling is the element which comes just after other element, for example- 

<h3>hey heading h3</h3>
<p>hey para</p>

so here in this example p is the adjacent sibling of h3

Another example: 
<h3>hey heading h3</h3>
<p>hey para</p>
<p>hey para 2</p>

so in this example, the "p" with content "hey para" is the adjacent sibling , not one with the content "hey para 2"
*/

/* AFTER AND BEFORE PSEUDO ELEMENTS

the after pseudo element creates a pseudo element that will automatically be the very first child of the selected element. This can be very useful when we don't want to necesserily add a new element to the HTML.
*/

/* -------------------------------------------------------------------------------------- */
/* FLOATS */
/* .author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  margin-top: 10px;
  margin-left: 20px;
  float: left;
}

h1 {
  float: left;
}

nav {
  float: right;
} */

/* when we use float in situation where we have a header and something needs to be on the left side while others on the right, so we apply float on both of them, because of which height of the element gets collapsed, and to retain that height, we need to clear float */

/* we have two ways, one is to create an empty div and then clear the float, another method (good practice) is that, give some class to the parent element, and then create a pseudo element (which will work as an empty div itself, but will not clutter the HTML) and clear the float, also pseudo elements work on block level elements, so do not forget to make it block */

/* empty div method */
/* .clear {
  clear: both;
}

.clearfixhack::after {
  clear: both;
  content: "";
  display: block;
}*/
.container {
  width: 1200px;
}

/* article { */
/* background-color: green; */
/* width: 825px;
  float: left;
} */

/* aside { */
/* background-color: red; */
/* width: 300px;
  float: right;
} */

/* footer { */
/* background-color: yellow; */
/* clear: both;
} */

/* -------------------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------------------- */
/* Flexbox */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

nav a {
  margin-right: 40px;
}

nav a:last-child {
  margin-right: 0;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  margin-bottom: 5px;
  display: block;
}

.row {
  display: flex;
  gap: 75px;
  margin-bottom: 60px;
  align-items: flex-start;
}

aside {
  flex: 0 0 300px;
}

article {
  flex: 1;
  margin-bottom: 0;
}
